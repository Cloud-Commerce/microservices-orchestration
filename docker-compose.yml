services:
  service-registry:
    build: ./service-registry
    image: service-registry:latest
    ports:
      - "8761:8761"
    networks:
      - ecommerce-net

  user-db:
    image: postgres:17.4-alpine
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=user_db_user
      - POSTGRES_PASSWORD=user_db_pass
    volumes:
      - user-data:/var/lib/postgresql/data
    networks:
      - ecommerce-net
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user_db_user -d user_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.4-alpine  # Lightweight Redis 7.4
    ports:
      - "6379:6379"  # Expose Redis port
#    environment:
#      - REDIS_PASSWORD=mypassword  # Enable auth (optional)
#      - REDIS_USERNAME=myuser      # Redis 6+ ACL (optional)
    volumes:
      - redis_data:/data  # Persist data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro  # Custom config
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]  # Load config
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - ecommerce-net

  kafka: # Kafka Service using KRaft mode (no ZooKeeper needed)
    image: bitnami/kafka:4.0.0
    ports:
      - "9092:9092"
    environment:
      # KRaft mode configuration
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

      # Cluster settings
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk # Random UUID format
      - ALLOW_PLAINTEXT_LISTENER=yes

      # Topic auto-creation settings
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true

      # For development - reduce memory usage
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms256m
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - ecommerce-net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  authn-service:
    build: ./authN-service
    image: authn-service:latest
    ports:
      - "8501:8501"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka
      - REDIS_DATASOURCE_URL=redis://redis:6379
    depends_on:
      service-registry:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-net

  gateway-service:
    build: ./gateway-service
    image: gateway-service:latest
    ports:
      - "8500:8500"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka
      - REDIS_DATASOURCE_URL=redis://redis:6379
    depends_on:
      service-registry:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-net

  user-service:
    build: ./user-service
    image: user-service:latest
    ports:
      - "8502:8502"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_db
      - SPRING_DATASOURCE_USERNAME=user_db_user
      - SPRING_DATASOURCE_PASSWORD=user_db_pass
    depends_on:
      user-db:
        condition: service_healthy
      service-registry:
        condition: service_started
    networks:
      - ecommerce-net

volumes:
  user-data:
  redis_data:  # Named volume for Redis persistence
  kafka_data: # Named volume for Kafka persistence

networks:
  ecommerce-net:
    driver: bridge